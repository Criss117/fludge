/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AuthSignUpRouteImport } from './routes/auth/sign-up'
import { Route as AuthSignInRouteImport } from './routes/auth/sign-in'
import { Route as AuthEmployeeSignInRouteImport } from './routes/auth/employee/sign-in'
import { Route as privateBusinessSelectBusinessRouteImport } from './routes/(private)/business/select-business'
import { Route as privateBusinessRegisterRouteImport } from './routes/(private)/business/register'
import { Route as privateBusinessIdRouteImport } from './routes/(private)/business/$id'
import { Route as privateBusinessIdIndexRouteImport } from './routes/(private)/business/$id/index'
import { Route as privateBusinessIdSettingsRouteImport } from './routes/(private)/business/$id/settings'
import { Route as privateBusinessIdSalesRouteImport } from './routes/(private)/business/$id/sales'
import { Route as privateBusinessIdProductsRouteImport } from './routes/(private)/business/$id/products'
import { Route as privateBusinessIdEmployeesRouteImport } from './routes/(private)/business/$id/employees'
import { Route as privateBusinessIdConfigRouteImport } from './routes/(private)/business/$id/config'
import { Route as privateBusinessIdClientsRouteImport } from './routes/(private)/business/$id/clients'
import { Route as privateBusinessIdGroupsIndexRouteImport } from './routes/(private)/business/$id/groups/index'
import { Route as privateBusinessIdGroupsCreateRouteImport } from './routes/(private)/business/$id/groups/create'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthSignUpRoute = AuthSignUpRouteImport.update({
  id: '/auth/sign-up',
  path: '/auth/sign-up',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthSignInRoute = AuthSignInRouteImport.update({
  id: '/auth/sign-in',
  path: '/auth/sign-in',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthEmployeeSignInRoute = AuthEmployeeSignInRouteImport.update({
  id: '/auth/employee/sign-in',
  path: '/auth/employee/sign-in',
  getParentRoute: () => rootRouteImport,
} as any)
const privateBusinessSelectBusinessRoute =
  privateBusinessSelectBusinessRouteImport.update({
    id: '/(private)/business/select-business',
    path: '/business/select-business',
    getParentRoute: () => rootRouteImport,
  } as any)
const privateBusinessRegisterRoute = privateBusinessRegisterRouteImport.update({
  id: '/(private)/business/register',
  path: '/business/register',
  getParentRoute: () => rootRouteImport,
} as any)
const privateBusinessIdRoute = privateBusinessIdRouteImport.update({
  id: '/(private)/business/$id',
  path: '/business/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const privateBusinessIdIndexRoute = privateBusinessIdIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => privateBusinessIdRoute,
} as any)
const privateBusinessIdSettingsRoute =
  privateBusinessIdSettingsRouteImport.update({
    id: '/settings',
    path: '/settings',
    getParentRoute: () => privateBusinessIdRoute,
  } as any)
const privateBusinessIdSalesRoute = privateBusinessIdSalesRouteImport.update({
  id: '/sales',
  path: '/sales',
  getParentRoute: () => privateBusinessIdRoute,
} as any)
const privateBusinessIdProductsRoute =
  privateBusinessIdProductsRouteImport.update({
    id: '/products',
    path: '/products',
    getParentRoute: () => privateBusinessIdRoute,
  } as any)
const privateBusinessIdEmployeesRoute =
  privateBusinessIdEmployeesRouteImport.update({
    id: '/employees',
    path: '/employees',
    getParentRoute: () => privateBusinessIdRoute,
  } as any)
const privateBusinessIdConfigRoute = privateBusinessIdConfigRouteImport.update({
  id: '/config',
  path: '/config',
  getParentRoute: () => privateBusinessIdRoute,
} as any)
const privateBusinessIdClientsRoute =
  privateBusinessIdClientsRouteImport.update({
    id: '/clients',
    path: '/clients',
    getParentRoute: () => privateBusinessIdRoute,
  } as any)
const privateBusinessIdGroupsIndexRoute =
  privateBusinessIdGroupsIndexRouteImport.update({
    id: '/groups/',
    path: '/groups/',
    getParentRoute: () => privateBusinessIdRoute,
  } as any)
const privateBusinessIdGroupsCreateRoute =
  privateBusinessIdGroupsCreateRouteImport.update({
    id: '/groups/create',
    path: '/groups/create',
    getParentRoute: () => privateBusinessIdRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/auth/sign-in': typeof AuthSignInRoute
  '/auth/sign-up': typeof AuthSignUpRoute
  '/business/$id': typeof privateBusinessIdRouteWithChildren
  '/business/register': typeof privateBusinessRegisterRoute
  '/business/select-business': typeof privateBusinessSelectBusinessRoute
  '/auth/employee/sign-in': typeof AuthEmployeeSignInRoute
  '/business/$id/clients': typeof privateBusinessIdClientsRoute
  '/business/$id/config': typeof privateBusinessIdConfigRoute
  '/business/$id/employees': typeof privateBusinessIdEmployeesRoute
  '/business/$id/products': typeof privateBusinessIdProductsRoute
  '/business/$id/sales': typeof privateBusinessIdSalesRoute
  '/business/$id/settings': typeof privateBusinessIdSettingsRoute
  '/business/$id/': typeof privateBusinessIdIndexRoute
  '/business/$id/groups/create': typeof privateBusinessIdGroupsCreateRoute
  '/business/$id/groups': typeof privateBusinessIdGroupsIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/auth/sign-in': typeof AuthSignInRoute
  '/auth/sign-up': typeof AuthSignUpRoute
  '/business/register': typeof privateBusinessRegisterRoute
  '/business/select-business': typeof privateBusinessSelectBusinessRoute
  '/auth/employee/sign-in': typeof AuthEmployeeSignInRoute
  '/business/$id/clients': typeof privateBusinessIdClientsRoute
  '/business/$id/config': typeof privateBusinessIdConfigRoute
  '/business/$id/employees': typeof privateBusinessIdEmployeesRoute
  '/business/$id/products': typeof privateBusinessIdProductsRoute
  '/business/$id/sales': typeof privateBusinessIdSalesRoute
  '/business/$id/settings': typeof privateBusinessIdSettingsRoute
  '/business/$id': typeof privateBusinessIdIndexRoute
  '/business/$id/groups/create': typeof privateBusinessIdGroupsCreateRoute
  '/business/$id/groups': typeof privateBusinessIdGroupsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/auth/sign-in': typeof AuthSignInRoute
  '/auth/sign-up': typeof AuthSignUpRoute
  '/(private)/business/$id': typeof privateBusinessIdRouteWithChildren
  '/(private)/business/register': typeof privateBusinessRegisterRoute
  '/(private)/business/select-business': typeof privateBusinessSelectBusinessRoute
  '/auth/employee/sign-in': typeof AuthEmployeeSignInRoute
  '/(private)/business/$id/clients': typeof privateBusinessIdClientsRoute
  '/(private)/business/$id/config': typeof privateBusinessIdConfigRoute
  '/(private)/business/$id/employees': typeof privateBusinessIdEmployeesRoute
  '/(private)/business/$id/products': typeof privateBusinessIdProductsRoute
  '/(private)/business/$id/sales': typeof privateBusinessIdSalesRoute
  '/(private)/business/$id/settings': typeof privateBusinessIdSettingsRoute
  '/(private)/business/$id/': typeof privateBusinessIdIndexRoute
  '/(private)/business/$id/groups/create': typeof privateBusinessIdGroupsCreateRoute
  '/(private)/business/$id/groups/': typeof privateBusinessIdGroupsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/auth/sign-in'
    | '/auth/sign-up'
    | '/business/$id'
    | '/business/register'
    | '/business/select-business'
    | '/auth/employee/sign-in'
    | '/business/$id/clients'
    | '/business/$id/config'
    | '/business/$id/employees'
    | '/business/$id/products'
    | '/business/$id/sales'
    | '/business/$id/settings'
    | '/business/$id/'
    | '/business/$id/groups/create'
    | '/business/$id/groups'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/auth/sign-in'
    | '/auth/sign-up'
    | '/business/register'
    | '/business/select-business'
    | '/auth/employee/sign-in'
    | '/business/$id/clients'
    | '/business/$id/config'
    | '/business/$id/employees'
    | '/business/$id/products'
    | '/business/$id/sales'
    | '/business/$id/settings'
    | '/business/$id'
    | '/business/$id/groups/create'
    | '/business/$id/groups'
  id:
    | '__root__'
    | '/'
    | '/auth/sign-in'
    | '/auth/sign-up'
    | '/(private)/business/$id'
    | '/(private)/business/register'
    | '/(private)/business/select-business'
    | '/auth/employee/sign-in'
    | '/(private)/business/$id/clients'
    | '/(private)/business/$id/config'
    | '/(private)/business/$id/employees'
    | '/(private)/business/$id/products'
    | '/(private)/business/$id/sales'
    | '/(private)/business/$id/settings'
    | '/(private)/business/$id/'
    | '/(private)/business/$id/groups/create'
    | '/(private)/business/$id/groups/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthSignInRoute: typeof AuthSignInRoute
  AuthSignUpRoute: typeof AuthSignUpRoute
  privateBusinessIdRoute: typeof privateBusinessIdRouteWithChildren
  privateBusinessRegisterRoute: typeof privateBusinessRegisterRoute
  privateBusinessSelectBusinessRoute: typeof privateBusinessSelectBusinessRoute
  AuthEmployeeSignInRoute: typeof AuthEmployeeSignInRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/sign-up': {
      id: '/auth/sign-up'
      path: '/auth/sign-up'
      fullPath: '/auth/sign-up'
      preLoaderRoute: typeof AuthSignUpRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/sign-in': {
      id: '/auth/sign-in'
      path: '/auth/sign-in'
      fullPath: '/auth/sign-in'
      preLoaderRoute: typeof AuthSignInRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/employee/sign-in': {
      id: '/auth/employee/sign-in'
      path: '/auth/employee/sign-in'
      fullPath: '/auth/employee/sign-in'
      preLoaderRoute: typeof AuthEmployeeSignInRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(private)/business/select-business': {
      id: '/(private)/business/select-business'
      path: '/business/select-business'
      fullPath: '/business/select-business'
      preLoaderRoute: typeof privateBusinessSelectBusinessRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(private)/business/register': {
      id: '/(private)/business/register'
      path: '/business/register'
      fullPath: '/business/register'
      preLoaderRoute: typeof privateBusinessRegisterRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(private)/business/$id': {
      id: '/(private)/business/$id'
      path: '/business/$id'
      fullPath: '/business/$id'
      preLoaderRoute: typeof privateBusinessIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(private)/business/$id/': {
      id: '/(private)/business/$id/'
      path: '/'
      fullPath: '/business/$id/'
      preLoaderRoute: typeof privateBusinessIdIndexRouteImport
      parentRoute: typeof privateBusinessIdRoute
    }
    '/(private)/business/$id/settings': {
      id: '/(private)/business/$id/settings'
      path: '/settings'
      fullPath: '/business/$id/settings'
      preLoaderRoute: typeof privateBusinessIdSettingsRouteImport
      parentRoute: typeof privateBusinessIdRoute
    }
    '/(private)/business/$id/sales': {
      id: '/(private)/business/$id/sales'
      path: '/sales'
      fullPath: '/business/$id/sales'
      preLoaderRoute: typeof privateBusinessIdSalesRouteImport
      parentRoute: typeof privateBusinessIdRoute
    }
    '/(private)/business/$id/products': {
      id: '/(private)/business/$id/products'
      path: '/products'
      fullPath: '/business/$id/products'
      preLoaderRoute: typeof privateBusinessIdProductsRouteImport
      parentRoute: typeof privateBusinessIdRoute
    }
    '/(private)/business/$id/employees': {
      id: '/(private)/business/$id/employees'
      path: '/employees'
      fullPath: '/business/$id/employees'
      preLoaderRoute: typeof privateBusinessIdEmployeesRouteImport
      parentRoute: typeof privateBusinessIdRoute
    }
    '/(private)/business/$id/config': {
      id: '/(private)/business/$id/config'
      path: '/config'
      fullPath: '/business/$id/config'
      preLoaderRoute: typeof privateBusinessIdConfigRouteImport
      parentRoute: typeof privateBusinessIdRoute
    }
    '/(private)/business/$id/clients': {
      id: '/(private)/business/$id/clients'
      path: '/clients'
      fullPath: '/business/$id/clients'
      preLoaderRoute: typeof privateBusinessIdClientsRouteImport
      parentRoute: typeof privateBusinessIdRoute
    }
    '/(private)/business/$id/groups/': {
      id: '/(private)/business/$id/groups/'
      path: '/groups'
      fullPath: '/business/$id/groups'
      preLoaderRoute: typeof privateBusinessIdGroupsIndexRouteImport
      parentRoute: typeof privateBusinessIdRoute
    }
    '/(private)/business/$id/groups/create': {
      id: '/(private)/business/$id/groups/create'
      path: '/groups/create'
      fullPath: '/business/$id/groups/create'
      preLoaderRoute: typeof privateBusinessIdGroupsCreateRouteImport
      parentRoute: typeof privateBusinessIdRoute
    }
  }
}

interface privateBusinessIdRouteChildren {
  privateBusinessIdClientsRoute: typeof privateBusinessIdClientsRoute
  privateBusinessIdConfigRoute: typeof privateBusinessIdConfigRoute
  privateBusinessIdEmployeesRoute: typeof privateBusinessIdEmployeesRoute
  privateBusinessIdProductsRoute: typeof privateBusinessIdProductsRoute
  privateBusinessIdSalesRoute: typeof privateBusinessIdSalesRoute
  privateBusinessIdSettingsRoute: typeof privateBusinessIdSettingsRoute
  privateBusinessIdIndexRoute: typeof privateBusinessIdIndexRoute
  privateBusinessIdGroupsCreateRoute: typeof privateBusinessIdGroupsCreateRoute
  privateBusinessIdGroupsIndexRoute: typeof privateBusinessIdGroupsIndexRoute
}

const privateBusinessIdRouteChildren: privateBusinessIdRouteChildren = {
  privateBusinessIdClientsRoute: privateBusinessIdClientsRoute,
  privateBusinessIdConfigRoute: privateBusinessIdConfigRoute,
  privateBusinessIdEmployeesRoute: privateBusinessIdEmployeesRoute,
  privateBusinessIdProductsRoute: privateBusinessIdProductsRoute,
  privateBusinessIdSalesRoute: privateBusinessIdSalesRoute,
  privateBusinessIdSettingsRoute: privateBusinessIdSettingsRoute,
  privateBusinessIdIndexRoute: privateBusinessIdIndexRoute,
  privateBusinessIdGroupsCreateRoute: privateBusinessIdGroupsCreateRoute,
  privateBusinessIdGroupsIndexRoute: privateBusinessIdGroupsIndexRoute,
}

const privateBusinessIdRouteWithChildren =
  privateBusinessIdRoute._addFileChildren(privateBusinessIdRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthSignInRoute: AuthSignInRoute,
  AuthSignUpRoute: AuthSignUpRoute,
  privateBusinessIdRoute: privateBusinessIdRouteWithChildren,
  privateBusinessRegisterRoute: privateBusinessRegisterRoute,
  privateBusinessSelectBusinessRoute: privateBusinessSelectBusinessRoute,
  AuthEmployeeSignInRoute: AuthEmployeeSignInRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
